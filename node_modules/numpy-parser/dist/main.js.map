{"version":3,"sources":["../src/main.js"],"names":["DataViewReader","dataViewOrBuffer","DataView","dataView","ArrayBuffer","offset","length","buffer","array","Uint8Array","_decodeASCIIByteArray","littleEndian","value","getUint8","BYTES_PER_ELEMENT","getUint16","Uint16Array","getUint32","Uint32Array","String","fromCharCode","characters","byte","char","push","join","fromArrayBuffer","Error","reader","magicByte","readUint8","magicWord","readAndASCIIDecodeBytes","headerLength","versionMajor","versionMinor","readUint16","readUint32","preludeLength","console","warn","headerStr","header","parseHeaderStr","fortran_order","constructor","typedArrayConstructorForDescription","descr","data","shape","jsonHeader","toLowerCase","replace","JSON","parse","dtypeDescription","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","dtype"],"mappings":"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","sourcesContent":["/* A simple stateful wrapper around a DataView that keeps track of the current offset.*/\n\nclass DataViewReader {\n  constructor(dataViewOrBuffer) {\n    if (dataViewOrBuffer instanceof DataView) {\n      this.dataView = dataViewOrBuffer;\n    } else if (dataViewOrBuffer instanceof ArrayBuffer) {\n      this.dataView = new DataView(dataViewOrBuffer);\n    }\n    this.offset = 0;\n  }\n\n  /* Variable length accessors */\n\n  readBytes(length) {\n    const buffer = new DataView(this.dataView.buffer, this.offset, length)\n    this.offset += length;\n    return buffer;\n  }\n\n  readAndASCIIDecodeBytes(length) {\n    const array = new Uint8Array(this.dataView.buffer, this.offset, length)\n    this.offset += length;\n    return this._decodeASCIIByteArray(array);\n  }\n\n  /* Fixed length accessors */\n\n  readUint8(littleEndian = false) {\n    const value = this.dataView.getUint8(this.offset, littleEndian);\n    this.offset += Uint8Array.BYTES_PER_ELEMENT;\n    return value;\n  }\n\n  readUint16(littleEndian = false) {\n    const value = this.dataView.getUint16(this.offset, littleEndian);\n    this.offset += Uint16Array.BYTES_PER_ELEMENT;\n    return value;\n  }\n\n  readUint32(littleEndian = false) {\n    const value = this.dataView.getUint32(this.offset, littleEndian);\n    this.offset += Uint32Array.BYTES_PER_ELEMENT;\n    return value;\n  }\n\n  /* Helpers */\n\n  _decodeASCIIByteArray(array) {\n    const characters = []\n    for (const byte of array) {\n      const char = String.fromCharCode(byte);\n      characters.push(char);\n    }\n    return characters.join('');\n  }\n}\n\n\nexport function fromArrayBuffer(buffer) {\n  if (!buffer instanceof ArrayBuffer) {\n    throw new Error('Argument must be an ArrayBuffer.');\n  }\n  const reader = new DataViewReader(buffer);\n  // comments are taken from https://docs.scipy.org/doc/numpy-1.14.1/neps/npy-format.html#format-specification-version-1-0\n  // \"The first 6 bytes are a magic string: exactly \"x93NUMPY\"\"\n  const magicByte = reader.readUint8();\n  const magicWord = reader.readAndASCIIDecodeBytes(5);\n  if (magicByte != 0x93 || magicWord != 'NUMPY') {\n      throw new Error(`unknown file type: \"${magicByte}${magicWord}\"`);\n  }\n  // \"The next 1 byte is an unsigned byte: the major version number of the file format, e.g. x01.\"\"\n  const versionMajor = reader.readUint8();\n  // \"The next 1 byte is an unsigned byte: the minor version number of the file format, e.g. x00.\"\n  const versionMinor = reader.readUint8();\n  // Parse header length. This depends on the major file format version as follows:\n  let headerLength;\n  if (versionMajor <= 1) {\n    // \"The next 2 bytes form a little-endian unsigned short int: the length of the header data HEADER_LEN.\"\n    headerLength = reader.readUint16(true);\n  } else {\n    // \"The next 4 bytes form a little-endian unsigned int: the length of the header data HEADER_LEN.\"\n    headerLength = reader.readUint32(true);\n  }\n  /* \"The next HEADER_LEN bytes form the header data describing the array’s format.\n  It is an ASCII string which contains a Python literal expression of a dictionary.\n  It is terminated by a newline (‘n’) and padded with spaces (‘x20’) to make the total\n  length of the magic string + 4 + HEADER_LEN be evenly divisible by 16.\" */\n  const preludeLength = 6 + 4 + headerLength;\n  if (preludeLength % 16 != 0) {\n    console.warn(`NPY file header is incorrectly padded. (${preludeLength} is not evenly divisible by 16.)`)\n  }\n\tconst headerStr = reader.readAndASCIIDecodeBytes(headerLength);\n  const header = parseHeaderStr(headerStr);\n  if (header.fortran_order) {\n    throw new Error('NPY file is written in Fortran byte order, support for this byte order is not yet implemented.')\n  }\n  // Intepret the bytes according to the specified dtype\n  const constructor = typedArrayConstructorForDescription(header.descr);\n  const data = new constructor(buffer, reader.offset);\n  // Return object with same signature as NDArray expects: {data, shape}\n  return { data: data, shape: header.shape };\n}\n\n\nfunction parseHeaderStr(headerStr) {\n  const jsonHeader = headerStr\n    .toLowerCase() // boolean literals: False -> false\n    .replace('(','[').replace('),',']') // Python tuple to JS array: (10,) -> [10,]\n    .replace('[,','[1,]').replace(',]',',1]') // implicit dimensions: [10,] -> [10,1]\n    .replace(/'/g, '\"'); // single quotes -> double quotes\n  return JSON.parse(jsonHeader);\n}\n\n\nfunction typedArrayConstructorForDescription(dtypeDescription) {\n  /* 'dtype' description strings consist of three characters, indicating one of three\n     properties each: byte order, data type, and byte length.\n\n     Byte order: '<' (little-endian), '>' (big-endian), or '|' (not applicable)\n     Data type: 'u' (unsigned), 'i' (signed integer), 'f' (floating)\n     Byte Length: 1, 2, 4 or 8 bytes\n\n     Note that for 1 byte dtypes there is no byte order, thus the use of '|' (not applicable).\n     Data types are specified in numpy source:\n     https://github.com/numpy/numpy/blob/8aa121415760cc6839a546c3f84e238d1dfa1aa6/numpy/core/_dtype.py#L13\n   */\n  switch (dtypeDescription) {\n\n    // Unsigned Integers\n    case '|u1':\n      return Uint8Array;\n    case '<u2':\n      return Uint16Array;\n    case '<u4':\n      return Uint32Array;\n    case '<u8':\n      throw new Error('Because JavaScript doesn\\'t currently include standard support for 64-bit unsigned integer values, support for this dtype is not yet implemented.');\n\n    // Integers\n    case '|i1': // \"byte\"\n      return Int8Array;\n    case '<i2': // \"short\"\n      return Int16Array;\n    case '<i4': // \"intc\"\n      return Int32Array;\n    case '<i8': // \"longlong\" (??)\n      throw new Error('Because JavaScript doesn\\'t currently include standard support for 64-bit integer values, support for this dtype is not yet implemented.');\n\n    // Floating\n    case '<f2': // \"half\"\n      throw new Error('Because JavaScript doesn\\'t currently include standard support for 16-bit floating point values, support for this dtype is not yet implemented.');\n    case '<f4': // \"single\"\n      return Float32Array;\n    case '<f8': // \"double\" \"longfloat\"\n      return Float64Array;\n\n    // No support for ComplexFloating, on-number types (flexible/character/void...) yet\n\n    default:\n      throw new Error('Unknown or not yet implemented numpy dtype description: ' + dtype);\n  }\n}\n"],"file":"main.js"}